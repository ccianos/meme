How THROW works

First, THROW checks whether top-of-stack is non-zero.
If not, then we're responding to being called by THROWing.
We check whether HANDLER is non-zero, meaning that CATCH was
called.  
If argument to THROW is non-zero:
	If HANDLER is non-zero:
		Set RP to the value in HANDLER
		Pop the new value of HANDLER off the rtn stack
		Pop SP off the rtn stack
		Pop IP off the rtn stack
		Goto next
	else: (HANDLER is zero)
		Set RP to RP0
		Set SP to SP0+1 (because of tos in a variable)
		Set FSP to FSP0+1 (because of ftos in a variable)
		Jump to the entry to QUIT
else: (arg to THROW is non-zero)
	pop the integer stack into TOS


HANDLER points at a frame on the return stack that looks like
this:

Item 1:		Ptr to previous stack frame
Item 2:		





9.6.1.0875 CATCH 
EXCEPTION 
( i*x xt -- j*x 0 | i*x n ) 

Push an exception frame on the exception stack and then execute the execution token xt (as with
EXECUTE) in such a way that control can be transferred to a point just after CATCH if THROW is
executed during the execution of xt. 

If the execution of xt completes normally (i.e., the exception frame pushed by this CATCH is not popped
by an execution of THROW) pop the exception frame and return zero on top of the data stack, above
whatever stack items would have been returned by xt EXECUTE. Otherwise, the remainder of the
execution semantics are given by THROW. 



9.6.1.2275 THROW 
EXCEPTION 
( k*x n -- k*x | i*x n ) 

If any bits of n are non-zero, pop the topmost exception frame from the exception stack, along with
everything on the return stack above that frame. Then restore the input source specification in use before
the corresponding CATCH and adjust the depths of all stacks defined by this Standard so that they are the
same as the depths saved in the exception frame (i is the same number as the i in the input arguments to the
corresponding CATCH), put n on top of the data stack, and transfer control to a point just after the
CATCH that pushed that exception frame. 

If the top of the stack is non zero and there is no exception frame on the exception stack, the behavior is as
follows: 

If n is minus-one (-1), perform the function of 6.1.0670 ABORT (the version of ABORT in the Core word
set), displaying no message. 

If n is minus-two, perform the function of 6.1.0680 ABORT" (the version of ABORT" in the Core word
set), displaying the characters ccc associated with the ABORT" that generated the THROW. 

Otherwise, the system may display an implementation-dependent message giving information about the
condition associated with the THROW code n. Subsequently, the system shall perform the function of
6.1.0670 ABORT (the version of ABORT in the Core word set). 

